---

    - name: Install python-pip and python-apt
      apt:
        update-cache: yes
        name: '{{ item }}'
        state: present
      loop:
        - python-apt
        - python-pip
      become: yes

    - name: Install dependencies
      pip:
        name: '{{ item }}'
        state: forcereinstall
      loop:
        - requests
        - influxdb
      become: yes

    - stat:
        path: "{{ files_remote_path }}"
      register: eseims

    - name: Copy files to /etc/ESEIMS
      copy:
        src: "{{ files_local_path }}"
        dest: "{{ files_remote_path }}"
      when:
        - not eseims.stat.exists
      become: yes


# -- Influxdata --

    - name: Import InfluxDB GPG signing key
      apt_key:
        url: "{{ influxdb_gpg_repo }}"
        state: present
      become: yes

    - name: Add InfluxDB repository
      apt_repository:
        repo: "{{ influxdb_source_repo }}"
        state: present
      become: yes

    - name: Install InfluxDB
      apt:
        update_cache: yes
        name: influxdb
        state: present
        force_apt_get: yes
      become: yes

    - name: Start InfluxDB
      service:
        name: influxdb
        state: started
        enabled: yes
      become: yes

    - name: wait
      pause: seconds=3

    - name: Replace default InfluxDB configuration file
      template:
        src: "{{ influxdb_local_config }}"
        dest: "{{ influxdb_remote_config }}"
      notify:
        - Reload InfluxDB
        - Restart InfluxDB
      become: yes

    - name: wait
      pause: seconds=3

    - name: start influxdb
      service:
        name: influxdb
        state: restarted
      become: yes

#    - name: create telegraf database with retention policy
#      command: "influx -execute \"CREATE DATABASE telegraf WITH DURATION 2d REPLICATION 1 NAME telegraf_retention_policy\""

#    - name: Create telegraf database
#      command: influx -execute "CREATE DATABASE telegraf"

#    - name: Create admin user
#      command: influx -execute "CREATE USER admin WITH PASSWORD 'admin' WITH ALL PRIVILEGES"

      #    - name: Create telegraf user
      #      command: influx -execute "CREATE USER {{ influxdb_telegraf_user }} WITH PASSWORD '{{ influxdb_telegraf_password }}' WITH ALL PRIVILEGES"

#    - name: create telegraf database with retention policy
#      command: "influx -execute \"CREATE DATABASE telegraf WITH DURATION 2d REPLICATION 1 NAME telegraf_retention_policy\""

# -- Telegraf -- #

    - name: Change syslog file permissions so that the logsparser plugin reads them
      file:
        path: /var/log/syslog
        mode: '0644'

    - name: Install Telegraf
      apt:
        update-cache: yes
        name: telegraf
        state: present
        force_apt_get: yes
      become: yes

    - name: Replace default Telegraf configuration file
      template:
        src: "{{ telegraf_local_config }}"
        dest: "{{ telegraf_remote_config }}"
      notify:
        - Reload Telegraf
        - Restart Telegraf
      become: yes

    - name: Ensure Telegraf is running
      service:
        name: telegraf
        state: started
        enabled: yes
      become: yes

# -- Kapacitor -- #

    - name: Download Kapacitor
      get_url:
        url: "{{ kapacitor_pkg_url }}"
        dest: '/tmp'
      become: yes

    - name: Install Kapacitor
      apt:
        deb: "/tmp/{{ kapacitor_pkg }}"
      become: yes

    - name: Replace default Kapacitor config file
      copy:
        src: "{{ kapacitor_local_config }}"
        dest: "{{ kapacitor_remote_config }}"
      notify:
        - Restart Kapacitor
      become: yes

    - name: Ensure Kapacitor is running
      service:
        name: kapacitor
        state: started
        enabled: yes
      become: yes

    - name: Alarms definition
      command: kapacitor define "{{ item }}" -tick "{{ item }}.tick"
      args:
        chdir: "{{ alarms_remote_path }}"
      loop: "{{ alarms }}"
      become: yes

    - name: Enable alarms
      command: kapacitor enable "{{ item }}"
      loop: "{{ alarms }}"


# -- Grafana -- #

    - name: Import Grafana GPG signing key
      apt_key:
        url: "{{ grafana_gpg_repo }}"
        state: present
      become: yes

    - name: Add Grafana repository
      apt_repository:
        repo: "{{ grafana_source_repo }}"
        state: present
      become: yes

    - name: Install Grafana
      apt:
        update_cache: yes
        name: grafana
        state: present
        force_apt_get: yes
      become: yes

    - name: Replace default Grafana configuration file
      template:
        src: "{{ grafana_local_config }}"
        dest: "{{ grafana_remote_config }}"
      notify:
        - Restart Grafana
      become: yes

    - name: Ensure Grafana is running
      service:
        name: grafana-server
        state: started
        enabled: yes
      become: yes

    - name: Configure influxDB as a grafana datasource
      grafana_datasource:
        name: "InfluxDB"
        grafana_url: "{{ grafana_address }}"
        grafana_user: "{{ grafana_admin_user }}"
        grafana_password: "{{ grafana_admin_password }}"
        ds_type: "influxdb"
        url: "{{ influxdb_address }}"
        database: "telegraf"
        user: "{{ influxdb_telegraf_user }}"
        password: "{{ influxdb_telegraf_password }}"

    - name: copy grafana dashboards json file to ESEIMS
      copy:
        src: "{{ grafana_dashboards_local }}/{{ item }}"
        dest: "{{ grafana_dashboards_remote }}"
      loop:
        - "{{ grafana_host_dashboard }}"
        - "{{ grafana_public_dashboard }}"
      become: yes

    - name: Import grafana dashboards from remote host
      grafana_dashboard:
        grafana_url: "{{ grafana_address }}"
        grafana_user: "{{ grafana_admin_user }}"
        grafana_password: "{{ grafana_admin_password }}"
        state: present
        overwrite: yes
        path: "{{ grafana_dashboards_remote }}/{{ item }}"
      loop:
        - "{{ grafana_host_dashboard }}"
        - "{{ grafana_public_dashboard }}"
      become: yes

##### WEB #####

    - name: Import Nodejs GPG signin key
      apt_key:
        url: "{{ nodejs_gpg_repo }}"
        state: present
      become: yes

    - name: Install Nodejs repository
      apt_repository:
        repo: "{{ nodejs_source_repo }}"
        state: present
        update_cache: yes
      become: yes

    - name: Install Nodejs
      apt:
        update_cache: yes
        name: nodejs
        state: present
        force_apt_get: yes
      become: yes

    - name: Install angular/cli
      command: npm install -g @angular/cli@8.3.23
      args:
        chdir: "{{ web_full_remote_path }}"
      become: yes

    - name: Install web dependencies
      npm:
        name: "{{ item }}"
        path: "{{ web_full_remote_path }}"
        state: present
      loop:
        - 'bcryptjs@2.4.3'
        - 'body-parser@1.19.0'
        - 'cors@2.8.5'
        - 'dotenv@8.2.0'
        - 'express@4.17.1'
        - 'express-list-endpoints@4.0.1'
        - 'express-validator@6.4.0'
        - 'jsonwebtoken@8.5.1'
        - 'jwt-decode@2.2.0'
        - 'mysql@2.18.1'
        - 'morgan@1.10.0'
        - 'material-design-icons@3.0.1'
        - 'ngx-pagination@5.0.0'
        - '@angular-devkit/build-angular@0.803.23'
        - '@angular/compiler-cli@8.2.14'
        - '@angular/compiler@8.2.14'
        - '@ngx-translate/core@12.1.2'
        - '@ngx-translate/http-loader@4.0.0'
      become: yes

    - name: Install forever to run nodejs as a daemon
      command: sudo npm install -g forever
      args:
        chdir: "{{ web_full_remote_path }}"
      become: yes

    - name: Create npm link to fix dependecy issues
      command: sudo npm link
      args:
        chdir: "{{ web_full_remote_path }}"
      become: yes

    - name: Install MySQL database
      apt:
        update_cache: yes
        name: "{{ item }}"
        state: present
        force_apt_get: yes
      loop:
        - mysql-server-5.7
        - libmysqlclient-dev
#      notify:
#        - Restart MySQL
      become: yes

    - name: Ensure MySQL is running
      service:
        name: mysql
        state: started
        enabled: yes
      become: yes

    - name: Install the Python MySQL module
      pip:
        name: MySQL-python
        state: forcereinstall
      become: yes

#    - name: Create anonymous user account for localhost
#      mysql_user:
#        name: 'root'
#        host: localhost
#        state: present

    - name: Create ESEIMS database
      mysql_db:
        name: eseims
        state: present
      become: yes

    - name: Create admin user
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: 'eseims.*:ALL,GRANT'
        state: present
      become: yes

    - name: Import eseims.sql to create database tables
      mysql_db:
        state: import
        name: eseims
        target: "{{ eseims_sql_path }}"
      become: yes

    - name: Build web
      command: ng build
      args:
        chdir: "{{ web_full_remote_path }}"
      become: yes

    - name: run forever nodejs
      command: sudo forever start -l eseims.log -o out.log -e err.log -a server.js
      args:
        chdir: "{{ web_full_remote_path }}"
      become: yes
